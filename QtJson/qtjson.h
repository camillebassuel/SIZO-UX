#ifndef JSON_H
#define JSON_H

#include <QVariant>
#include <string>
#include <QString>

#include <QFile>
#include <QTextStream>
#include <QDateTime>
#include <QStringList>
#include <QFile>
#include <QTextStream>
/**
 * \namespace QtJson
 * \brief A JSON data parser
 *
 * Json parses a JSON data into a QVariant hierarchy.
 */
namespace QtJson {
    typedef QVariantMap JsonObject;
    typedef QVariantList JsonArray;




    /**
     * Clone a JSON object (makes a deep copy)
     *
     * \param data The JSON object
     */
    QVariant clone(const QVariant &data);

    /**
     * Insert value to JSON object (QVariantMap)
     *
     * \param v The JSON object
     * \param key The key
     * \param value The value
     */
    void insert(QVariant &v, const QString &key, const QVariant &value);

    /**
     * Append value to JSON array (QVariantList)
     *
     * \param v The JSON array
     * \param value The value
     */
    void append(QVariant &v, const QVariant &value);

    /**
     * Parse a JSON string
     *
     * \param json The JSON data
     */
    QVariant parse(const QString &json);

    /**
     * Parse a JSON string
     *
     * \param json The JSON data
     * \param success The success of the parsing
     */
    QVariant parse(const QString &json, bool &success);

    /**
     * This method generates a textual JSON representation
     *
     * \param data The JSON data generated by the parser.
     *
     * \return QByteArray Textual JSON representation in UTF-8
     */
    QByteArray serialize(const QVariant &data);

    /**
     * This method generates a textual JSON representation
     *
     * \param data The JSON data generated by the parser.
     * \param success The success of the serialization
     *
     * \return QByteArray Textual JSON representation in UTF-8
     */
    QByteArray serialize(const QVariant &data, bool &success);

    /**
     * This method generates a textual JSON representation
     *
     * \param data The JSON data generated by the parser.
     *
     * \return QString Textual JSON representation
     */
    QString serializeStr(const QVariant &data);

    /**
     * This method generates a textual JSON representation
     *
     * \param data The JSON data generated by the parser.
     * \param success The success of the serialization
     *
     * \return QString Textual JSON representation
     */
    QString serializeStr(const QVariant &data, bool &success);

    /**
     * This method sets date(time) format to be used for QDateTime::toString
     * If QString is empty, Qt::TextDate is used.
     *
     * \param format The JSON data generated by the parser.
     */
    void setDateTimeFormat(const QString& format);
    void setDateFormat(const QString& format);

    /**
     * This method gets date(time) format to be used for QDateTime::toString
     * If QString is empty, Qt::TextDate is used.
     */
    QString getDateTimeFormat();
    QString getDateFormat();

    /**
     * QVariant based Json object
     */
    class Object : public QVariant {
        template<typename T>
        Object& insertKey(Object* ptr, const QString& key) {
            T* p = (T*)ptr->data();
            if (!p->contains(key)) p->insert(key, QVariant());
            return *reinterpret_cast<Object*>(&p->operator[](key));
        }
        template<typename T>
        void removeKey(Object *ptr, const QString& key) {
            T* p = (T*)ptr->data();
            p->remove(key);
        }
    public:
        Object() : QVariant() {}
        Object(const Object& ref) : QVariant(ref) {}

        Object& operator=(const QVariant& rhs) {
            /** It maybe more robust when running under Qt versions below 4.7 */
            QObject * obj = qvariant_cast<QObject *>(rhs);
            //  setValue(rhs);
            setValue(obj);
            return *this;
        }
        Object& operator[](const QString& key) {
            if (type() == QVariant::Map)
                return insertKey<QVariantMap>(this, key);
            else if (type() == QVariant::Hash)
                return insertKey<QVariantHash>(this, key);

            setValue(QVariantMap());

            return insertKey<QVariantMap>(this, key);
        }
        const Object& operator[](const QString& key) const {
            return const_cast<Object*>(this)->operator[](key);
        }
        void remove(const QString& key) {
            if (type() == QVariant::Map)
                removeKey<QVariantMap>(this, key);
            else if (type() == QVariant::Hash)
                removeKey<QVariantHash>(this, key);
        }
    };

    //chaque objet imple
    template<typename O>
    static std::vector<O> GetObjets(  QtJson::JsonObject o ,std::string nomconteneur, O (*fun)(QtJson::JsonObject))
    {
        std::vector<O> ret;
        QList< QVariant> vars = o[QString::fromStdString(nomconteneur)].toList();
        ret.reserve(vars.size());
        foreach (QVariant var, vars) {
            QtJson::JsonObject s = var.toMap();
            ret.push_back(fun(s));
        }
        return ret;
    }

    /**
     *
     * JsonFromString
     */
    static JsonObject JsonFromString(std::string &str){
        bool ok;
        QtJson::JsonObject results = QtJson::parse(QString::fromStdString(str), ok).toMap();
        if(!ok) {
          throw ("json imparsable");
        }else{
            return results;
        }
    }

    static JsonObject JsonFromFile(std::string path){
        QFile file(QString::fromStdString(path));
        file.open( QIODevice::ReadOnly| QIODevice::Text );
         QString lines ="";
        QTextStream in(&file);
        while (!in.atEnd()) {
            lines += in.readLine();
        }
        bool ok;
        QtJson::JsonObject results = QtJson::parse(lines, ok).toMap();
        if(!ok) {
          throw ("json imparsable");
        }else{
            return results;
        }
    }


}

#endif //JSON_H
